<?php

namespace App\Http\Controllers\Agents;

use Auth;
use App\UserBooking;
use App\User;
use App\Cyclo;
use App\Http\Requests;
use App\Http\Controllers\Controller;
use App\Points;
use Illuminate\Http\Request;
use Carbon\Carbon;
use Validator;
use Session;
use Mail;
use App\Pricing;
use Ramsey\Uuid\Uuid;
use Ramsey\Uuid\Exception\UnsatisfiedDependencyException;
use PDF;

class AgentsController extends Controller {

	public function __construct() {
        if (!file_exists(public_path().'/docs')) {
            mkdir(public_path().'/docs', 0777, true);
        }
        if (!file_exists(public_path().'/invoices')) {
            mkdir(public_path().'/invoices', 0777, true);
        }
    }
	
	public function getIndex(){		
		$title = 'Agent';
		$user = Auth::guard('agents')->user();
		$my_date = date('Y-m-d');
		$tBookings = UserBooking::whereRaw('date(start_datetime)= ?', [$my_date])->get(); //all bookings of current date
		return view('agents.index', compact('title', 'tBookings'));
	}

   	public function postSignature(Request $request, $id){
		$signature = \App\UserBooking::find($id);  
	   	if($signature && $signature->resv_status == 'reserved'){
	   		$reqs = $request->except(['_token']);
		    $img = $reqs['sign'];
		    $img = str_replace('data:image/png;base64,', '', $img);
		    $img = str_replace(' ', '+', $img);
		    $data = base64_decode($img);
		    $fname = 'sign-'. time(). '.png';
		    $file = public_path().'/docs/'.$fname;
		    file_put_contents($file, $data);
		    $insert = $signature->update(['check_in' => 1, 'sign_image' => $fname, 'check_in_time' => date('Y-m-d H:i:s'),'co_addr' => $reqs['co_addr'],'si_date' => $reqs['si_date'], 'checkd_cyc_num' => $reqs['cyc_num'], ]);
		    if($insert) {
	   			return response()->json(['status' => 'success', 'message' => 'Signature réussie' , 'datas' => $signature], 200);
	   		}else return response()->json(['status' => 'error', 'error' => 'Signature échouée'], 403); 
   		}else return response()->json(['status' => 'error', 'error' => 'Réservations Pas trouvé'], 403); 
   	}

	public function getBooking(){		
		$title = 'Réservation';
		$pilots = \App\User::whereRaw('activated=? AND etat=?', [1, 1])->get();
		$cyclo = \App\Cyclo::whereRaw('status=? AND agent=?', [1, 1])->first();
		if($cyclo){
			$start = date('Y-m-d');
	   		$end = date('Y-m-d 23:59:59');
	   		$hash_timestamp = time();	
			$res_id = $cyclo->resource_id;
			$quantity = $cyclo->quantity;
			$curl = curl_init();
				curl_setopt_array($curl, array(
					CURLOPT_URL => "https://www.planyo.com/rest/?method=get_resource_usage&api_key=". env('API_KEY1') ."&hash_timestamp=" . $hash_timestamp . "&hash_key=" . md5( env('HASH_KEY1') . $hash_timestamp . "get_resource_usage"),
					CURLOPT_POST => 1,
					CURLOPT_RETURNTRANSFER => true,
					CURLOPT_POSTFIELDS => array(
						'resource_id' => intval($res_id),
						'start_date' => $start,
						'end_date' => $end,
					)
				));
			$resv = curl_exec($curl);
			curl_close($curl);
			$resp = json_decode($resv, true);
			if( $resp['response_code'] == '0') {
				$results = $resp['data']['usage'];
				if(empty($results) || $results == null){
					$avails[] = 0;	
				}else{
					if(array_key_exists($res_id, $results)) { 
						$usages = $results[$res_id];
						$avails = [];
						foreach ($usages as $Ykey => $year) {
							foreach ($year as $Mkey => $months) {
								if($Mkey < 10) $Mkey = '0'.$Mkey;
								foreach ($months as $key => $month) {
									if($key < 10) $key = '0'.$key;
									$avails[$Ykey.'-'.$Mkey.'-'.$key] = $quantity - $month;
								}
							}
						}
						if(array_key_exists($start, $avails)){
							if($avails[$start] <= 0) return redirect('/agents')->withError("Plus de réservations ne sont pas autorisées pour aujourd'hui!");
						}
					}else $avails = [];
				}
				$price = 0;
				$tariff = $this->instaPrice($start, $start, $res_id, null);				
				if( $tariff['response_code'] == '0' ) {
					$price = $tariff['data']['total'];
					if($price == 0) return redirect('/agents')->withError("On a rencontré une erreur!!");
				} else return redirect('/agents')->withError($tariff['response_message']);
				return view('agents.booking', compact('title', 'pilots', 'cyclo', 'price'));
			}else return redirect('/agents')->withError($resp['response_message']);
		}else return redirect('/agents')->withError("Cyclo Pas trouvé!");
	}
   	/*-- Unique Number generator to grant the access of cyclo to pilot which is sent by mail & text --*/
	private function uniqueNum(){
		$unique = mt_rand(10000, 99999);
		$r = UserBooking::where('uni_code', '=', $unique)->exists(); //checks whether the key generated is already used!!
		if($r){
			return $this->uniqueNum(); //if key generated exists in UserBooking table, again random key is generated by initiating the same function again.
		}
		return $unique; // returns the unique key
	}

   	public function postBooking(Request $request){
   		$user = User::where('id', '=', $request->input('pilote'))->first();
   		$cyclo = Cyclo::where('id', '=', $request->input('selec'))->first();
   		$date = date('Y-m-d');
   		$note = 'user_id'.$user->id;
   		$hash_timestamp = time();
   		if(!$user) return redirect()->back()->withError("Utilisateur Pas trouvé!");
   		if(!$cyclo) return redirect()->back()->withError("Cyclo Pas trouvé!");
   		$ubook = UserBooking::whereRaw('user_id =? AND start_datetime =? AND end_datetime =? AND resv_status != ? ', [$user->id, $date, $date, 'cancelled'])->get();
  		if(!$ubook->isEmpty()) return redirect()->back()->withError("Utilisateur ayant déjà réservé pour les dates sélectionnées!");
   		else {
   			$paid = $request->input('tariff');
            $uni_code = $this->uniqueNum();
			$data = ['user_id' => $user->id, 'cyclo_id' => $cyclo->id,'status' => $cyclo->status , 'start_datetime' => $date, 'end_datetime' => $date, 'total_amount' => $paid, 'paid_amount' => $paid, 'pending_amount' => '0', 'surname'=>$user->surname, 'name'=>$user->name, 'address'=>$user->address,'city'=>$user->city, 'email'=>$user->email,'phone'=>$user->phone,'uni_code' => $uni_code, 'discount_in_percent' => null];
	   		$verf = \App\Sms::numVerification($user->phone);					
	   		if( $verf['status'] == false && $verf['error'] == true) return redirect()->back()->withError('Numero de telephone non valide')->withInput();
	   		$data['pay_mode'] = '0';
	   		$curl = curl_init();
			curl_setopt_array($curl, array(
				CURLOPT_URL => "https://www.planyo.com/rest/?method=make_reservation&api_key=". env('API_KEY1') ."&hash_timestamp=" . $hash_timestamp . "&hash_key=" . md5( env('HASH_KEY1') . $hash_timestamp . "make_reservation"),
				CURLOPT_POST => 1,
				CURLOPT_RETURNTRANSFER => true,
				CURLOPT_POSTFIELDS => array(
					'resource_id' => $cyclo->resource_id,
					'start_time' => $date,
					'end_time' => $date,
					'quantity' => 1,
					'email' => $user->email,
					'first_name' => $user->name,
					'last_name' => $user->surname,
					// 'wants_share' => 1,
					// 'rental_prop_voucher' => $data['coupon'],
					'force_status' => 4,
					'admin_notes' => $note,
					'language'=>'FR',
				)
			));
			$resv = curl_exec($curl);
			curl_close($curl);
			$resp = json_decode($resv, true);
			$time = date("Y-m-d_H-i-s-u");
			$path = public_path('invoices/' . $time . '_invoice.pdf');
			$data['invoice'] = str_replace(public_path(), '', $path);
			if( $resp['response_code'] == '0' ) {
				$data['resv_id'] = $resp['data']['reservation_id'];
				$data['coupon'] = null;
				$insert = \App\UserBooking::create($data);
				$data1 = ['user_id' => $user->id, 'booking_id' => $insert->id, 'cyclo_id' => $cyclo->id, 'type' => 'booking', 'points' => $paid];
				$pts = \App\Points::create($data1);
				if($insert){						
			   		PDF::loadView('cyclo.emails.invoice', array('insert' => $insert))->save($path);
			   		$terms = public_path("terms/terms.pdf");
			   		$data['created_at'] = $insert->created_at;
			   		$start_datetime_fr = $this->date_in_french(date('Y-m-d', strtotime($data['start_datetime'])));
					$paid_date_fr = $this->date_in_french(date('Y-m-d', strtotime($data['created_at'])));
                    Mail::send('cyclo.emails.booked', ['data' => $data, 'insert' => $insert,'type' => '2', 'start_datetime_fr'=> $start_datetime_fr, 'paid_date_fr'=> $paid_date_fr ], function ($m) use ($insert, $data, $path, $terms, $start_datetime_fr){
						$m->from('resa-paris@cyclopolitain.com', 'AGENCE CYCLOPOLITAIN');
						$m->to($insert->email)->subject('Ta réservation de cyclo le '. $start_datetime_fr);
						$m->attach($path, ['as' => 'invoice.pdf', 'mime' => 'application/pdf',]);
						$m->attach($terms, ['as' => 'terms&conditions.pdf', 'mime' => 'application/pdf',]);
					});
					$receiver = $data['phone'];
					$cyclo_type = 'TARIF AGENCE';
					$body = "Bravo ta réservation  du " . $start_datetime_fr . " est validée!  Les conditions d'annulation et de remboursement dépendent de l'offre choisie. Ton cyclo ".$cyclo_type." sera à ta disposition le " . $start_datetime_fr . " jusqu'à 12h30. Bonne journée! Code: " .$data['uni_code'];
					\App\Sms::sendSms($receiver, $body);
					return redirect('/agents')->withMessage('Reservé avec succès!');
				}else return redirect()->back()->withError('On a rencontré une erreur!')->withInput();
			}else return redirect()->back()->withError(strip_tags($resp['response_message']))->withInput();
		}
   	}

	private function instaPrice($start_date, $end_date, $cyc, $email){
		$end_date = date('Y-m-d 23:59:59', strtotime($end_date)); //end date is midnight of selected day //Because booking is allowed for one single day.
		$hash_timestamp = time();
		$curl = curl_init();
		curl_setopt_array($curl, array(
			CURLOPT_URL => "https://www.planyo.com/rest/?method=get_rental_price&api_key=". env('API_KEY1') ."&hash_timestamp=" . $hash_timestamp . "&hash_key=" . md5( env('HASH_KEY1') . $hash_timestamp . "get_rental_price"),
			CURLOPT_POST => 1,
			CURLOPT_RETURNTRANSFER => true,
			CURLOPT_POSTFIELDS => array(
				'resource_id' => $cyc, //resource ID of selected cyclo
				'start_time' => $start_date, 
				'end_time' => $end_date,
				'user_email' => $email,
				'quantity' => 1,
				'language'=>'FR',
			)
		));
		$resv = curl_exec($curl);
		curl_close($curl);
		$resp = json_decode($resv, true);
		return $resp;
	}

	public function postAvail(Request $request, $id){
		$pilot = \App\User::find($id);
		$date = date('Y-m-d');
		if($pilot && $pilot->etat == 1){
			$ubook = UserBooking::whereRaw('user_id =? AND start_datetime =? AND end_datetime =? AND resv_status =? ', [$pilot->id, $date, $date, 'reserved'])->first();
			if($ubook) return response()->json(['success' => false, 'errors' => 'Utilisateur ayant déjà réservé pour les dates sélectionnées!'], 400);   		
			else{
				$cyclo = \App\Cyclo::whereRaw('status=? AND agent=?', [1, 1])->first();
				if($cyclo){
					$price = $this->instaPrice($date, $date, $cyclo->resource_id, $pilot->email);
					if($price['response_code'] == '0' ) return response()->json(['success' => true, 'message' => 'Pilot is Available!', 'price' => $price], 200);
					else return response()->json(['success' => false, 'errors' => $price['response_message'] ], 400);
				}else return response()->json(['success' => false, 'errors' => 'Cyclo Pas trouvé!'], 404);
			}
		}else return response()->json(['success' => false, 'errors' => 'Pilot Pas trouvé!'], 404);
	}
	//new function
	private function date_in_french($date){
		$week_name = array("Dimanche","Lundi","Mardi","Mercredi","Jeudi","Vendredi","Samedi");
		$month_name=array("","Janvier","Février","Mars","Avril","Mai","Juin","Juillet","Août",
		"Septembre","Octobre","Novembre","Décembre");
		$split = preg_split('/-/', $date);
		$year = $split[0];
		$month = round($split[1]);
		$day = round($split[2]);
		$week_day = date("w", mktime(12, 0, 0, $month, $day, $year));
		return $date_fr = $day .' '. $month_name[$month] .' '. $year;
	}

	public function getLogout(){
		Auth::guard('agents')->logout();
		return redirect('/agents/login')->withMessage("Déconnecté avec succès!");
	}
}